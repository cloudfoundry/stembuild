package ovftool_test

import (
	"os"
	"path/filepath"
	"runtime"

	"github.com/cloudfoundry/stembuild/package_stemcell/ovftool"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("ovftool", func() {

	Context("findExecutable", func() {
		var exeFolder, outFolder string
		var ovftoolExe = "ovftool"
		if runtime.GOOS == "windows" {
			ovftoolExe += ".exe"
		}

		BeforeEach(func() {
			exeFolder = GinkgoT().TempDir() // automatically cleaned up

			outFolder = filepath.Join(exeFolder, "out")
			Expect(os.Mkdir(outFolder, os.ModeDir|os.ModePerm)).To(Succeed())
		})

		It("given root that has executable and valid executable name, should return location of the executable", func() {
			Expect(os.WriteFile(filepath.Join(outFolder, ovftoolExe), []byte{}, os.ModePerm)).To(Succeed())

			executable, err := ovftool.FindExecutable(exeFolder, ovftoolExe)

			Expect(err).NotTo(HaveOccurred())
			Expect(executable).To(Equal(filepath.Join(outFolder, ovftoolExe)))
		})

		It("given root that does not have the executable and valid executable name, should return an error", func() {
			errorString := "executable file not found in: " + exeFolder

			executable, err := ovftool.FindExecutable(exeFolder, ovftoolExe)

			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring(errorString))
			Expect(executable).To(Equal(""))
		})

		It("given valid root and invalid name, should return an error", func() {
			errorString := "executable file not found in: " + exeFolder

			executable, err := ovftool.FindExecutable(exeFolder, "notRealExec")

			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring(errorString))
			Expect(executable).To(Equal(""))
		})

		It("given invalid root and valid name, should return an error", func() {
			pwd, err := os.Getwd()
			Expect(err).NotTo(HaveOccurred())
			// pwd is set to stembuild/ovftool, so we need to go up a directory
			pwd = filepath.Join(pwd, "..", "dirShouldNotExist")

			executable, err := ovftool.FindExecutable(pwd, ovftoolExe)

			// No need to check entire error string as it'is not generated by our code
			Expect(err).To(HaveOccurred())
			Expect(executable).To(Equal(""))
		})
	})
})
