// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	"sync"
	"time"

	"github.com/cloudfoundry/stembuild/construct"
)

type FakeScriptExecutorI struct {
	ExecutePostRebootScriptStub        func(time.Duration) error
	executePostRebootScriptMutex       sync.RWMutex
	executePostRebootScriptArgsForCall []struct {
		arg1 time.Duration
	}
	executePostRebootScriptReturns struct {
		result1 error
	}
	executePostRebootScriptReturnsOnCall map[int]struct {
		result1 error
	}
	ExecuteSetupScriptStub        func(string) error
	executeSetupScriptMutex       sync.RWMutex
	executeSetupScriptArgsForCall []struct {
		arg1 string
	}
	executeSetupScriptReturns struct {
		result1 error
	}
	executeSetupScriptReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScript(arg1 time.Duration) error {
	fake.executePostRebootScriptMutex.Lock()
	ret, specificReturn := fake.executePostRebootScriptReturnsOnCall[len(fake.executePostRebootScriptArgsForCall)]
	fake.executePostRebootScriptArgsForCall = append(fake.executePostRebootScriptArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("ExecutePostRebootScript", []interface{}{arg1})
	fake.executePostRebootScriptMutex.Unlock()
	if fake.ExecutePostRebootScriptStub != nil {
		return fake.ExecutePostRebootScriptStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.executePostRebootScriptReturns
	return fakeReturns.result1
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScriptCallCount() int {
	fake.executePostRebootScriptMutex.RLock()
	defer fake.executePostRebootScriptMutex.RUnlock()
	return len(fake.executePostRebootScriptArgsForCall)
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScriptCalls(stub func(time.Duration) error) {
	fake.executePostRebootScriptMutex.Lock()
	defer fake.executePostRebootScriptMutex.Unlock()
	fake.ExecutePostRebootScriptStub = stub
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScriptArgsForCall(i int) time.Duration {
	fake.executePostRebootScriptMutex.RLock()
	defer fake.executePostRebootScriptMutex.RUnlock()
	argsForCall := fake.executePostRebootScriptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScriptReturns(result1 error) {
	fake.executePostRebootScriptMutex.Lock()
	defer fake.executePostRebootScriptMutex.Unlock()
	fake.ExecutePostRebootScriptStub = nil
	fake.executePostRebootScriptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScriptExecutorI) ExecutePostRebootScriptReturnsOnCall(i int, result1 error) {
	fake.executePostRebootScriptMutex.Lock()
	defer fake.executePostRebootScriptMutex.Unlock()
	fake.ExecutePostRebootScriptStub = nil
	if fake.executePostRebootScriptReturnsOnCall == nil {
		fake.executePostRebootScriptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executePostRebootScriptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScriptExecutorI) ExecuteSetupScript(arg1 string) error {
	fake.executeSetupScriptMutex.Lock()
	ret, specificReturn := fake.executeSetupScriptReturnsOnCall[len(fake.executeSetupScriptArgsForCall)]
	fake.executeSetupScriptArgsForCall = append(fake.executeSetupScriptArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExecuteSetupScript", []interface{}{arg1})
	fake.executeSetupScriptMutex.Unlock()
	if fake.ExecuteSetupScriptStub != nil {
		return fake.ExecuteSetupScriptStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.executeSetupScriptReturns
	return fakeReturns.result1
}

func (fake *FakeScriptExecutorI) ExecuteSetupScriptCallCount() int {
	fake.executeSetupScriptMutex.RLock()
	defer fake.executeSetupScriptMutex.RUnlock()
	return len(fake.executeSetupScriptArgsForCall)
}

func (fake *FakeScriptExecutorI) ExecuteSetupScriptCalls(stub func(string) error) {
	fake.executeSetupScriptMutex.Lock()
	defer fake.executeSetupScriptMutex.Unlock()
	fake.ExecuteSetupScriptStub = stub
}

func (fake *FakeScriptExecutorI) ExecuteSetupScriptArgsForCall(i int) string {
	fake.executeSetupScriptMutex.RLock()
	defer fake.executeSetupScriptMutex.RUnlock()
	argsForCall := fake.executeSetupScriptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScriptExecutorI) ExecuteSetupScriptReturns(result1 error) {
	fake.executeSetupScriptMutex.Lock()
	defer fake.executeSetupScriptMutex.Unlock()
	fake.ExecuteSetupScriptStub = nil
	fake.executeSetupScriptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScriptExecutorI) ExecuteSetupScriptReturnsOnCall(i int, result1 error) {
	fake.executeSetupScriptMutex.Lock()
	defer fake.executeSetupScriptMutex.Unlock()
	fake.ExecuteSetupScriptStub = nil
	if fake.executeSetupScriptReturnsOnCall == nil {
		fake.executeSetupScriptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeSetupScriptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScriptExecutorI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executePostRebootScriptMutex.RLock()
	defer fake.executePostRebootScriptMutex.RUnlock()
	fake.executeSetupScriptMutex.RLock()
	defer fake.executeSetupScriptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScriptExecutorI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.ScriptExecutorI = new(FakeScriptExecutorI)
