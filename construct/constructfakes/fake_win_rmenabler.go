// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/construct"
)

type FakeWinRMEnabler struct {
	EnableStub        func() error
	enableMutex       sync.RWMutex
	enableArgsForCall []struct {
	}
	enableReturns struct {
		result1 error
	}
	enableReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWinRMEnabler) Enable() error {
	fake.enableMutex.Lock()
	ret, specificReturn := fake.enableReturnsOnCall[len(fake.enableArgsForCall)]
	fake.enableArgsForCall = append(fake.enableArgsForCall, struct {
	}{})
	fake.recordInvocation("Enable", []interface{}{})
	fake.enableMutex.Unlock()
	if fake.EnableStub != nil {
		return fake.EnableStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enableReturns
	return fakeReturns.result1
}

func (fake *FakeWinRMEnabler) EnableCallCount() int {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return len(fake.enableArgsForCall)
}

func (fake *FakeWinRMEnabler) EnableCalls(stub func() error) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = stub
}

func (fake *FakeWinRMEnabler) EnableReturns(result1 error) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = nil
	fake.enableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWinRMEnabler) EnableReturnsOnCall(i int, result1 error) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = nil
	if fake.enableReturnsOnCall == nil {
		fake.enableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWinRMEnabler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWinRMEnabler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.WinRMEnabler = new(FakeWinRMEnabler)
