// Code generated by counterfeiter. DO NOT EDIT.
package remotemanagerfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/remotemanager"
)

type FakeRebootCheckerI struct {
	RebootHasFinishedStub        func() (bool, error)
	rebootHasFinishedMutex       sync.RWMutex
	rebootHasFinishedArgsForCall []struct {
	}
	rebootHasFinishedReturns struct {
		result1 bool
		result2 error
	}
	rebootHasFinishedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRebootCheckerI) RebootHasFinished() (bool, error) {
	fake.rebootHasFinishedMutex.Lock()
	ret, specificReturn := fake.rebootHasFinishedReturnsOnCall[len(fake.rebootHasFinishedArgsForCall)]
	fake.rebootHasFinishedArgsForCall = append(fake.rebootHasFinishedArgsForCall, struct {
	}{})
	stub := fake.RebootHasFinishedStub
	fakeReturns := fake.rebootHasFinishedReturns
	fake.recordInvocation("RebootHasFinished", []interface{}{})
	fake.rebootHasFinishedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRebootCheckerI) RebootHasFinishedCallCount() int {
	fake.rebootHasFinishedMutex.RLock()
	defer fake.rebootHasFinishedMutex.RUnlock()
	return len(fake.rebootHasFinishedArgsForCall)
}

func (fake *FakeRebootCheckerI) RebootHasFinishedCalls(stub func() (bool, error)) {
	fake.rebootHasFinishedMutex.Lock()
	defer fake.rebootHasFinishedMutex.Unlock()
	fake.RebootHasFinishedStub = stub
}

func (fake *FakeRebootCheckerI) RebootHasFinishedReturns(result1 bool, result2 error) {
	fake.rebootHasFinishedMutex.Lock()
	defer fake.rebootHasFinishedMutex.Unlock()
	fake.RebootHasFinishedStub = nil
	fake.rebootHasFinishedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRebootCheckerI) RebootHasFinishedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.rebootHasFinishedMutex.Lock()
	defer fake.rebootHasFinishedMutex.Unlock()
	fake.RebootHasFinishedStub = nil
	if fake.rebootHasFinishedReturnsOnCall == nil {
		fake.rebootHasFinishedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.rebootHasFinishedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRebootCheckerI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rebootHasFinishedMutex.RLock()
	defer fake.rebootHasFinishedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRebootCheckerI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remotemanager.RebootCheckerI = new(FakeRebootCheckerI)
