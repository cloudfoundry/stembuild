// Code generated by counterfeiter. DO NOT EDIT.
package remotemanagerfakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry/stembuild/remotemanager"
	"github.com/masterzen/winrm"
)

type FakeWinRMClient struct {
	CreateShellStub        func() (*winrm.Shell, error)
	createShellMutex       sync.RWMutex
	createShellArgsForCall []struct {
	}
	createShellReturns struct {
		result1 *winrm.Shell
		result2 error
	}
	createShellReturnsOnCall map[int]struct {
		result1 *winrm.Shell
		result2 error
	}
	RunStub        func(string, io.Writer, io.Writer) (int, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 string
		arg2 io.Writer
		arg3 io.Writer
	}
	runReturns struct {
		result1 int
		result2 error
	}
	runReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWinRMClient) CreateShell() (*winrm.Shell, error) {
	fake.createShellMutex.Lock()
	ret, specificReturn := fake.createShellReturnsOnCall[len(fake.createShellArgsForCall)]
	fake.createShellArgsForCall = append(fake.createShellArgsForCall, struct {
	}{})
	stub := fake.CreateShellStub
	fakeReturns := fake.createShellReturns
	fake.recordInvocation("CreateShell", []interface{}{})
	fake.createShellMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWinRMClient) CreateShellCallCount() int {
	fake.createShellMutex.RLock()
	defer fake.createShellMutex.RUnlock()
	return len(fake.createShellArgsForCall)
}

func (fake *FakeWinRMClient) CreateShellCalls(stub func() (*winrm.Shell, error)) {
	fake.createShellMutex.Lock()
	defer fake.createShellMutex.Unlock()
	fake.CreateShellStub = stub
}

func (fake *FakeWinRMClient) CreateShellReturns(result1 *winrm.Shell, result2 error) {
	fake.createShellMutex.Lock()
	defer fake.createShellMutex.Unlock()
	fake.CreateShellStub = nil
	fake.createShellReturns = struct {
		result1 *winrm.Shell
		result2 error
	}{result1, result2}
}

func (fake *FakeWinRMClient) CreateShellReturnsOnCall(i int, result1 *winrm.Shell, result2 error) {
	fake.createShellMutex.Lock()
	defer fake.createShellMutex.Unlock()
	fake.CreateShellStub = nil
	if fake.createShellReturnsOnCall == nil {
		fake.createShellReturnsOnCall = make(map[int]struct {
			result1 *winrm.Shell
			result2 error
		})
	}
	fake.createShellReturnsOnCall[i] = struct {
		result1 *winrm.Shell
		result2 error
	}{result1, result2}
}

func (fake *FakeWinRMClient) Run(arg1 string, arg2 io.Writer, arg3 io.Writer) (int, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 string
		arg2 io.Writer
		arg3 io.Writer
	}{arg1, arg2, arg3})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2, arg3})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWinRMClient) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeWinRMClient) RunCalls(stub func(string, io.Writer, io.Writer) (int, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeWinRMClient) RunArgsForCall(i int) (string, io.Writer, io.Writer) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWinRMClient) RunReturns(result1 int, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWinRMClient) RunReturnsOnCall(i int, result1 int, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWinRMClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createShellMutex.RLock()
	defer fake.createShellMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWinRMClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remotemanager.WinRMClient = new(FakeWinRMClient)
