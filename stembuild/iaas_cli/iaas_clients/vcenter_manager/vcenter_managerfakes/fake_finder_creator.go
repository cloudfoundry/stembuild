// Code generated by counterfeiter. DO NOT EDIT.
package vcenter_managerfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-windows-stemcell-builder/stembuild/iaas_cli/iaas_clients/vcenter_manager"
	"github.com/vmware/govmomi/find"
	"github.com/vmware/govmomi/vim25"
)

type FakeFinderCreator struct {
	NewFinderStub        func(*vim25.Client, bool) *find.Finder
	newFinderMutex       sync.RWMutex
	newFinderArgsForCall []struct {
		arg1 *vim25.Client
		arg2 bool
	}
	newFinderReturns struct {
		result1 *find.Finder
	}
	newFinderReturnsOnCall map[int]struct {
		result1 *find.Finder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinderCreator) NewFinder(arg1 *vim25.Client, arg2 bool) *find.Finder {
	fake.newFinderMutex.Lock()
	ret, specificReturn := fake.newFinderReturnsOnCall[len(fake.newFinderArgsForCall)]
	fake.newFinderArgsForCall = append(fake.newFinderArgsForCall, struct {
		arg1 *vim25.Client
		arg2 bool
	}{arg1, arg2})
	stub := fake.NewFinderStub
	fakeReturns := fake.newFinderReturns
	fake.recordInvocation("NewFinder", []interface{}{arg1, arg2})
	fake.newFinderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFinderCreator) NewFinderCallCount() int {
	fake.newFinderMutex.RLock()
	defer fake.newFinderMutex.RUnlock()
	return len(fake.newFinderArgsForCall)
}

func (fake *FakeFinderCreator) NewFinderCalls(stub func(*vim25.Client, bool) *find.Finder) {
	fake.newFinderMutex.Lock()
	defer fake.newFinderMutex.Unlock()
	fake.NewFinderStub = stub
}

func (fake *FakeFinderCreator) NewFinderArgsForCall(i int) (*vim25.Client, bool) {
	fake.newFinderMutex.RLock()
	defer fake.newFinderMutex.RUnlock()
	argsForCall := fake.newFinderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFinderCreator) NewFinderReturns(result1 *find.Finder) {
	fake.newFinderMutex.Lock()
	defer fake.newFinderMutex.Unlock()
	fake.NewFinderStub = nil
	fake.newFinderReturns = struct {
		result1 *find.Finder
	}{result1}
}

func (fake *FakeFinderCreator) NewFinderReturnsOnCall(i int, result1 *find.Finder) {
	fake.newFinderMutex.Lock()
	defer fake.newFinderMutex.Unlock()
	fake.NewFinderStub = nil
	if fake.newFinderReturnsOnCall == nil {
		fake.newFinderReturnsOnCall = make(map[int]struct {
			result1 *find.Finder
		})
	}
	fake.newFinderReturnsOnCall[i] = struct {
		result1 *find.Finder
	}{result1}
}

func (fake *FakeFinderCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newFinderMutex.RLock()
	defer fake.newFinderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinderCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vcenter_manager.FinderCreator = new(FakeFinderCreator)
