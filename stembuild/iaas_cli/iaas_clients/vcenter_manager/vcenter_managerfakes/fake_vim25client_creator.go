// Code generated by counterfeiter. DO NOT EDIT.
package vcenter_managerfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/bosh-windows-stemcell-builder/stembuild/iaas_cli/iaas_clients/vcenter_manager"
	"github.com/vmware/govmomi/vim25"
	"github.com/vmware/govmomi/vim25/soap"
)

type FakeVim25ClientCreator struct {
	NewClientStub        func(context.Context, soap.RoundTripper) (*vim25.Client, error)
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		arg1 context.Context
		arg2 soap.RoundTripper
	}
	newClientReturns struct {
		result1 *vim25.Client
		result2 error
	}
	newClientReturnsOnCall map[int]struct {
		result1 *vim25.Client
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVim25ClientCreator) NewClient(arg1 context.Context, arg2 soap.RoundTripper) (*vim25.Client, error) {
	fake.newClientMutex.Lock()
	ret, specificReturn := fake.newClientReturnsOnCall[len(fake.newClientArgsForCall)]
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		arg1 context.Context
		arg2 soap.RoundTripper
	}{arg1, arg2})
	stub := fake.NewClientStub
	fakeReturns := fake.newClientReturns
	fake.recordInvocation("NewClient", []interface{}{arg1, arg2})
	fake.newClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVim25ClientCreator) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

func (fake *FakeVim25ClientCreator) NewClientCalls(stub func(context.Context, soap.RoundTripper) (*vim25.Client, error)) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = stub
}

func (fake *FakeVim25ClientCreator) NewClientArgsForCall(i int) (context.Context, soap.RoundTripper) {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	argsForCall := fake.newClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVim25ClientCreator) NewClientReturns(result1 *vim25.Client, result2 error) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 *vim25.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeVim25ClientCreator) NewClientReturnsOnCall(i int, result1 *vim25.Client, result2 error) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	if fake.newClientReturnsOnCall == nil {
		fake.newClientReturnsOnCall = make(map[int]struct {
			result1 *vim25.Client
			result2 error
		})
	}
	fake.newClientReturnsOnCall[i] = struct {
		result1 *vim25.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeVim25ClientCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVim25ClientCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vcenter_manager.Vim25ClientCreator = new(FakeVim25ClientCreator)
