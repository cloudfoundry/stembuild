// Code generated by counterfeiter. DO NOT EDIT.
package iaas_clifakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/iaas_cli"
)

type FakeCliRunner struct {
	RunStub        func([]string) int
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 []string
	}
	runReturns struct {
		result1 int
	}
	runReturnsOnCall map[int]struct {
		result1 int
	}
	RunWithOutputStub        func([]string) (string, int, error)
	runWithOutputMutex       sync.RWMutex
	runWithOutputArgsForCall []struct {
		arg1 []string
	}
	runWithOutputReturns struct {
		result1 string
		result2 int
		result3 error
	}
	runWithOutputReturnsOnCall map[int]struct {
		result1 string
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCliRunner) Run(arg1 []string) int {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1Copy})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCliRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCliRunner) RunCalls(stub func([]string) int) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeCliRunner) RunArgsForCall(i int) []string {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCliRunner) RunReturns(result1 int) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeCliRunner) RunReturnsOnCall(i int, result1 int) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeCliRunner) RunWithOutput(arg1 []string) (string, int, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.runWithOutputMutex.Lock()
	ret, specificReturn := fake.runWithOutputReturnsOnCall[len(fake.runWithOutputArgsForCall)]
	fake.runWithOutputArgsForCall = append(fake.runWithOutputArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.RunWithOutputStub
	fakeReturns := fake.runWithOutputReturns
	fake.recordInvocation("RunWithOutput", []interface{}{arg1Copy})
	fake.runWithOutputMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCliRunner) RunWithOutputCallCount() int {
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	return len(fake.runWithOutputArgsForCall)
}

func (fake *FakeCliRunner) RunWithOutputCalls(stub func([]string) (string, int, error)) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = stub
}

func (fake *FakeCliRunner) RunWithOutputArgsForCall(i int) []string {
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	argsForCall := fake.runWithOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCliRunner) RunWithOutputReturns(result1 string, result2 int, result3 error) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = nil
	fake.runWithOutputReturns = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCliRunner) RunWithOutputReturnsOnCall(i int, result1 string, result2 int, result3 error) {
	fake.runWithOutputMutex.Lock()
	defer fake.runWithOutputMutex.Unlock()
	fake.RunWithOutputStub = nil
	if fake.runWithOutputReturnsOnCall == nil {
		fake.runWithOutputReturnsOnCall = make(map[int]struct {
			result1 string
			result2 int
			result3 error
		})
	}
	fake.runWithOutputReturnsOnCall[i] = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCliRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runWithOutputMutex.RLock()
	defer fake.runWithOutputMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCliRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iaas_cli.CliRunner = new(FakeCliRunner)
