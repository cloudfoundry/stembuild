// Code generated by counterfeiter. DO NOT EDIT.
package guest_managerfakes

import (
	"context"
	"net/url"
	"sync"

	"github.com/cloudfoundry/stembuild/iaas_cli/iaas_clients/guest_manager"
	"github.com/vmware/govmomi/vim25/types"
)

type FakeFileManager struct {
	InitiateFileTransferFromGuestStub        func(context.Context, types.BaseGuestAuthentication, string) (*types.FileTransferInformation, error)
	initiateFileTransferFromGuestMutex       sync.RWMutex
	initiateFileTransferFromGuestArgsForCall []struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 string
	}
	initiateFileTransferFromGuestReturns struct {
		result1 *types.FileTransferInformation
		result2 error
	}
	initiateFileTransferFromGuestReturnsOnCall map[int]struct {
		result1 *types.FileTransferInformation
		result2 error
	}
	TransferURLStub        func(context.Context, string) (*url.URL, error)
	transferURLMutex       sync.RWMutex
	transferURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	transferURLReturns struct {
		result1 *url.URL
		result2 error
	}
	transferURLReturnsOnCall map[int]struct {
		result1 *url.URL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileManager) InitiateFileTransferFromGuest(arg1 context.Context, arg2 types.BaseGuestAuthentication, arg3 string) (*types.FileTransferInformation, error) {
	fake.initiateFileTransferFromGuestMutex.Lock()
	ret, specificReturn := fake.initiateFileTransferFromGuestReturnsOnCall[len(fake.initiateFileTransferFromGuestArgsForCall)]
	fake.initiateFileTransferFromGuestArgsForCall = append(fake.initiateFileTransferFromGuestArgsForCall, struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.InitiateFileTransferFromGuestStub
	fakeReturns := fake.initiateFileTransferFromGuestReturns
	fake.recordInvocation("InitiateFileTransferFromGuest", []interface{}{arg1, arg2, arg3})
	fake.initiateFileTransferFromGuestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileManager) InitiateFileTransferFromGuestCallCount() int {
	fake.initiateFileTransferFromGuestMutex.RLock()
	defer fake.initiateFileTransferFromGuestMutex.RUnlock()
	return len(fake.initiateFileTransferFromGuestArgsForCall)
}

func (fake *FakeFileManager) InitiateFileTransferFromGuestCalls(stub func(context.Context, types.BaseGuestAuthentication, string) (*types.FileTransferInformation, error)) {
	fake.initiateFileTransferFromGuestMutex.Lock()
	defer fake.initiateFileTransferFromGuestMutex.Unlock()
	fake.InitiateFileTransferFromGuestStub = stub
}

func (fake *FakeFileManager) InitiateFileTransferFromGuestArgsForCall(i int) (context.Context, types.BaseGuestAuthentication, string) {
	fake.initiateFileTransferFromGuestMutex.RLock()
	defer fake.initiateFileTransferFromGuestMutex.RUnlock()
	argsForCall := fake.initiateFileTransferFromGuestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileManager) InitiateFileTransferFromGuestReturns(result1 *types.FileTransferInformation, result2 error) {
	fake.initiateFileTransferFromGuestMutex.Lock()
	defer fake.initiateFileTransferFromGuestMutex.Unlock()
	fake.InitiateFileTransferFromGuestStub = nil
	fake.initiateFileTransferFromGuestReturns = struct {
		result1 *types.FileTransferInformation
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManager) InitiateFileTransferFromGuestReturnsOnCall(i int, result1 *types.FileTransferInformation, result2 error) {
	fake.initiateFileTransferFromGuestMutex.Lock()
	defer fake.initiateFileTransferFromGuestMutex.Unlock()
	fake.InitiateFileTransferFromGuestStub = nil
	if fake.initiateFileTransferFromGuestReturnsOnCall == nil {
		fake.initiateFileTransferFromGuestReturnsOnCall = make(map[int]struct {
			result1 *types.FileTransferInformation
			result2 error
		})
	}
	fake.initiateFileTransferFromGuestReturnsOnCall[i] = struct {
		result1 *types.FileTransferInformation
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManager) TransferURL(arg1 context.Context, arg2 string) (*url.URL, error) {
	fake.transferURLMutex.Lock()
	ret, specificReturn := fake.transferURLReturnsOnCall[len(fake.transferURLArgsForCall)]
	fake.transferURLArgsForCall = append(fake.transferURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TransferURLStub
	fakeReturns := fake.transferURLReturns
	fake.recordInvocation("TransferURL", []interface{}{arg1, arg2})
	fake.transferURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileManager) TransferURLCallCount() int {
	fake.transferURLMutex.RLock()
	defer fake.transferURLMutex.RUnlock()
	return len(fake.transferURLArgsForCall)
}

func (fake *FakeFileManager) TransferURLCalls(stub func(context.Context, string) (*url.URL, error)) {
	fake.transferURLMutex.Lock()
	defer fake.transferURLMutex.Unlock()
	fake.TransferURLStub = stub
}

func (fake *FakeFileManager) TransferURLArgsForCall(i int) (context.Context, string) {
	fake.transferURLMutex.RLock()
	defer fake.transferURLMutex.RUnlock()
	argsForCall := fake.transferURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileManager) TransferURLReturns(result1 *url.URL, result2 error) {
	fake.transferURLMutex.Lock()
	defer fake.transferURLMutex.Unlock()
	fake.TransferURLStub = nil
	fake.transferURLReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManager) TransferURLReturnsOnCall(i int, result1 *url.URL, result2 error) {
	fake.transferURLMutex.Lock()
	defer fake.transferURLMutex.Unlock()
	fake.TransferURLStub = nil
	if fake.transferURLReturnsOnCall == nil {
		fake.transferURLReturnsOnCall = make(map[int]struct {
			result1 *url.URL
			result2 error
		})
	}
	fake.transferURLReturnsOnCall[i] = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeFileManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initiateFileTransferFromGuestMutex.RLock()
	defer fake.initiateFileTransferFromGuestMutex.RUnlock()
	fake.transferURLMutex.RLock()
	defer fake.transferURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ guest_manager.FileManager = new(FakeFileManager)
