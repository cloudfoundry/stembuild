// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/commandparser"
)

type FakeOSAndVersionGetter struct {
	GetOsStub        func() string
	getOsMutex       sync.RWMutex
	getOsArgsForCall []struct {
	}
	getOsReturns struct {
		result1 string
	}
	getOsReturnsOnCall map[int]struct {
		result1 string
	}
	GetVersionStub        func() string
	getVersionMutex       sync.RWMutex
	getVersionArgsForCall []struct {
	}
	getVersionReturns struct {
		result1 string
	}
	getVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetVersionWithPatchNumberStub        func(string) string
	getVersionWithPatchNumberMutex       sync.RWMutex
	getVersionWithPatchNumberArgsForCall []struct {
		arg1 string
	}
	getVersionWithPatchNumberReturns struct {
		result1 string
	}
	getVersionWithPatchNumberReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOSAndVersionGetter) GetOs() string {
	fake.getOsMutex.Lock()
	ret, specificReturn := fake.getOsReturnsOnCall[len(fake.getOsArgsForCall)]
	fake.getOsArgsForCall = append(fake.getOsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetOs", []interface{}{})
	fake.getOsMutex.Unlock()
	if fake.GetOsStub != nil {
		return fake.GetOsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getOsReturns
	return fakeReturns.result1
}

func (fake *FakeOSAndVersionGetter) GetOsCallCount() int {
	fake.getOsMutex.RLock()
	defer fake.getOsMutex.RUnlock()
	return len(fake.getOsArgsForCall)
}

func (fake *FakeOSAndVersionGetter) GetOsCalls(stub func() string) {
	fake.getOsMutex.Lock()
	defer fake.getOsMutex.Unlock()
	fake.GetOsStub = stub
}

func (fake *FakeOSAndVersionGetter) GetOsReturns(result1 string) {
	fake.getOsMutex.Lock()
	defer fake.getOsMutex.Unlock()
	fake.GetOsStub = nil
	fake.getOsReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) GetOsReturnsOnCall(i int, result1 string) {
	fake.getOsMutex.Lock()
	defer fake.getOsMutex.Unlock()
	fake.GetOsStub = nil
	if fake.getOsReturnsOnCall == nil {
		fake.getOsReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getOsReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) GetVersion() string {
	fake.getVersionMutex.Lock()
	ret, specificReturn := fake.getVersionReturnsOnCall[len(fake.getVersionArgsForCall)]
	fake.getVersionArgsForCall = append(fake.getVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetVersion", []interface{}{})
	fake.getVersionMutex.Unlock()
	if fake.GetVersionStub != nil {
		return fake.GetVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVersionReturns
	return fakeReturns.result1
}

func (fake *FakeOSAndVersionGetter) GetVersionCallCount() int {
	fake.getVersionMutex.RLock()
	defer fake.getVersionMutex.RUnlock()
	return len(fake.getVersionArgsForCall)
}

func (fake *FakeOSAndVersionGetter) GetVersionCalls(stub func() string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = stub
}

func (fake *FakeOSAndVersionGetter) GetVersionReturns(result1 string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = nil
	fake.getVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) GetVersionReturnsOnCall(i int, result1 string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = nil
	if fake.getVersionReturnsOnCall == nil {
		fake.getVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumber(arg1 string) string {
	fake.getVersionWithPatchNumberMutex.Lock()
	ret, specificReturn := fake.getVersionWithPatchNumberReturnsOnCall[len(fake.getVersionWithPatchNumberArgsForCall)]
	fake.getVersionWithPatchNumberArgsForCall = append(fake.getVersionWithPatchNumberArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetVersionWithPatchNumber", []interface{}{arg1})
	fake.getVersionWithPatchNumberMutex.Unlock()
	if fake.GetVersionWithPatchNumberStub != nil {
		return fake.GetVersionWithPatchNumberStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVersionWithPatchNumberReturns
	return fakeReturns.result1
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumberCallCount() int {
	fake.getVersionWithPatchNumberMutex.RLock()
	defer fake.getVersionWithPatchNumberMutex.RUnlock()
	return len(fake.getVersionWithPatchNumberArgsForCall)
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumberCalls(stub func(string) string) {
	fake.getVersionWithPatchNumberMutex.Lock()
	defer fake.getVersionWithPatchNumberMutex.Unlock()
	fake.GetVersionWithPatchNumberStub = stub
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumberArgsForCall(i int) string {
	fake.getVersionWithPatchNumberMutex.RLock()
	defer fake.getVersionWithPatchNumberMutex.RUnlock()
	argsForCall := fake.getVersionWithPatchNumberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumberReturns(result1 string) {
	fake.getVersionWithPatchNumberMutex.Lock()
	defer fake.getVersionWithPatchNumberMutex.Unlock()
	fake.GetVersionWithPatchNumberStub = nil
	fake.getVersionWithPatchNumberReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) GetVersionWithPatchNumberReturnsOnCall(i int, result1 string) {
	fake.getVersionWithPatchNumberMutex.Lock()
	defer fake.getVersionWithPatchNumberMutex.Unlock()
	fake.GetVersionWithPatchNumberStub = nil
	if fake.getVersionWithPatchNumberReturnsOnCall == nil {
		fake.getVersionWithPatchNumberReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getVersionWithPatchNumberReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeOSAndVersionGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOsMutex.RLock()
	defer fake.getOsMutex.RUnlock()
	fake.getVersionMutex.RLock()
	defer fake.getVersionMutex.RUnlock()
	fake.getVersionWithPatchNumberMutex.RLock()
	defer fake.getVersionWithPatchNumberMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOSAndVersionGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.OSAndVersionGetter = new(FakeOSAndVersionGetter)
