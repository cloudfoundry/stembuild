// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/commandparser"
	"github.com/cloudfoundry/stembuild/filesystem"
)

type FakePackager struct {
	PackageStub        func() error
	packageMutex       sync.RWMutex
	packageArgsForCall []struct {
	}
	packageReturns struct {
		result1 error
	}
	packageReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateFreeSpaceForPackageStub        func(filesystem.FileSystem) error
	validateFreeSpaceForPackageMutex       sync.RWMutex
	validateFreeSpaceForPackageArgsForCall []struct {
		arg1 filesystem.FileSystem
	}
	validateFreeSpaceForPackageReturns struct {
		result1 error
	}
	validateFreeSpaceForPackageReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateSourceParametersStub        func() error
	validateSourceParametersMutex       sync.RWMutex
	validateSourceParametersArgsForCall []struct {
	}
	validateSourceParametersReturns struct {
		result1 error
	}
	validateSourceParametersReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackager) Package() error {
	fake.packageMutex.Lock()
	ret, specificReturn := fake.packageReturnsOnCall[len(fake.packageArgsForCall)]
	fake.packageArgsForCall = append(fake.packageArgsForCall, struct {
	}{})
	stub := fake.PackageStub
	fakeReturns := fake.packageReturns
	fake.recordInvocation("Package", []interface{}{})
	fake.packageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePackager) PackageCallCount() int {
	fake.packageMutex.RLock()
	defer fake.packageMutex.RUnlock()
	return len(fake.packageArgsForCall)
}

func (fake *FakePackager) PackageCalls(stub func() error) {
	fake.packageMutex.Lock()
	defer fake.packageMutex.Unlock()
	fake.PackageStub = stub
}

func (fake *FakePackager) PackageReturns(result1 error) {
	fake.packageMutex.Lock()
	defer fake.packageMutex.Unlock()
	fake.PackageStub = nil
	fake.packageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) PackageReturnsOnCall(i int, result1 error) {
	fake.packageMutex.Lock()
	defer fake.packageMutex.Unlock()
	fake.PackageStub = nil
	if fake.packageReturnsOnCall == nil {
		fake.packageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.packageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) ValidateFreeSpaceForPackage(arg1 filesystem.FileSystem) error {
	fake.validateFreeSpaceForPackageMutex.Lock()
	ret, specificReturn := fake.validateFreeSpaceForPackageReturnsOnCall[len(fake.validateFreeSpaceForPackageArgsForCall)]
	fake.validateFreeSpaceForPackageArgsForCall = append(fake.validateFreeSpaceForPackageArgsForCall, struct {
		arg1 filesystem.FileSystem
	}{arg1})
	stub := fake.ValidateFreeSpaceForPackageStub
	fakeReturns := fake.validateFreeSpaceForPackageReturns
	fake.recordInvocation("ValidateFreeSpaceForPackage", []interface{}{arg1})
	fake.validateFreeSpaceForPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePackager) ValidateFreeSpaceForPackageCallCount() int {
	fake.validateFreeSpaceForPackageMutex.RLock()
	defer fake.validateFreeSpaceForPackageMutex.RUnlock()
	return len(fake.validateFreeSpaceForPackageArgsForCall)
}

func (fake *FakePackager) ValidateFreeSpaceForPackageCalls(stub func(filesystem.FileSystem) error) {
	fake.validateFreeSpaceForPackageMutex.Lock()
	defer fake.validateFreeSpaceForPackageMutex.Unlock()
	fake.ValidateFreeSpaceForPackageStub = stub
}

func (fake *FakePackager) ValidateFreeSpaceForPackageArgsForCall(i int) filesystem.FileSystem {
	fake.validateFreeSpaceForPackageMutex.RLock()
	defer fake.validateFreeSpaceForPackageMutex.RUnlock()
	argsForCall := fake.validateFreeSpaceForPackageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePackager) ValidateFreeSpaceForPackageReturns(result1 error) {
	fake.validateFreeSpaceForPackageMutex.Lock()
	defer fake.validateFreeSpaceForPackageMutex.Unlock()
	fake.ValidateFreeSpaceForPackageStub = nil
	fake.validateFreeSpaceForPackageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) ValidateFreeSpaceForPackageReturnsOnCall(i int, result1 error) {
	fake.validateFreeSpaceForPackageMutex.Lock()
	defer fake.validateFreeSpaceForPackageMutex.Unlock()
	fake.ValidateFreeSpaceForPackageStub = nil
	if fake.validateFreeSpaceForPackageReturnsOnCall == nil {
		fake.validateFreeSpaceForPackageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateFreeSpaceForPackageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) ValidateSourceParameters() error {
	fake.validateSourceParametersMutex.Lock()
	ret, specificReturn := fake.validateSourceParametersReturnsOnCall[len(fake.validateSourceParametersArgsForCall)]
	fake.validateSourceParametersArgsForCall = append(fake.validateSourceParametersArgsForCall, struct {
	}{})
	stub := fake.ValidateSourceParametersStub
	fakeReturns := fake.validateSourceParametersReturns
	fake.recordInvocation("ValidateSourceParameters", []interface{}{})
	fake.validateSourceParametersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePackager) ValidateSourceParametersCallCount() int {
	fake.validateSourceParametersMutex.RLock()
	defer fake.validateSourceParametersMutex.RUnlock()
	return len(fake.validateSourceParametersArgsForCall)
}

func (fake *FakePackager) ValidateSourceParametersCalls(stub func() error) {
	fake.validateSourceParametersMutex.Lock()
	defer fake.validateSourceParametersMutex.Unlock()
	fake.ValidateSourceParametersStub = stub
}

func (fake *FakePackager) ValidateSourceParametersReturns(result1 error) {
	fake.validateSourceParametersMutex.Lock()
	defer fake.validateSourceParametersMutex.Unlock()
	fake.ValidateSourceParametersStub = nil
	fake.validateSourceParametersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) ValidateSourceParametersReturnsOnCall(i int, result1 error) {
	fake.validateSourceParametersMutex.Lock()
	defer fake.validateSourceParametersMutex.Unlock()
	fake.ValidateSourceParametersStub = nil
	if fake.validateSourceParametersReturnsOnCall == nil {
		fake.validateSourceParametersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateSourceParametersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePackager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.packageMutex.RLock()
	defer fake.packageMutex.RUnlock()
	fake.validateFreeSpaceForPackageMutex.RLock()
	defer fake.validateFreeSpaceForPackageMutex.RUnlock()
	fake.validateSourceParametersMutex.RLock()
	defer fake.validateSourceParametersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.Packager = new(FakePackager)
