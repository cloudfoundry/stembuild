// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/stembuild/commandparser"
	vcenter_client_factory "github.com/cloudfoundry/stembuild/iaas_cli/iaas_clients/factory"
	"github.com/cloudfoundry/stembuild/iaas_cli/iaas_clients/vcenter_manager"
)

type FakeManagerFactory struct {
	SetConfigStub        func(vcenter_client_factory.FactoryConfig)
	setConfigMutex       sync.RWMutex
	setConfigArgsForCall []struct {
		arg1 vcenter_client_factory.FactoryConfig
	}
	VCenterManagerStub        func(context.Context) (*vcenter_manager.VCenterManager, error)
	vCenterManagerMutex       sync.RWMutex
	vCenterManagerArgsForCall []struct {
		arg1 context.Context
	}
	vCenterManagerReturns struct {
		result1 *vcenter_manager.VCenterManager
		result2 error
	}
	vCenterManagerReturnsOnCall map[int]struct {
		result1 *vcenter_manager.VCenterManager
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManagerFactory) SetConfig(arg1 vcenter_client_factory.FactoryConfig) {
	fake.setConfigMutex.Lock()
	fake.setConfigArgsForCall = append(fake.setConfigArgsForCall, struct {
		arg1 vcenter_client_factory.FactoryConfig
	}{arg1})
	stub := fake.SetConfigStub
	fake.recordInvocation("SetConfig", []interface{}{arg1})
	fake.setConfigMutex.Unlock()
	if stub != nil {
		fake.SetConfigStub(arg1)
	}
}

func (fake *FakeManagerFactory) SetConfigCallCount() int {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	return len(fake.setConfigArgsForCall)
}

func (fake *FakeManagerFactory) SetConfigCalls(stub func(vcenter_client_factory.FactoryConfig)) {
	fake.setConfigMutex.Lock()
	defer fake.setConfigMutex.Unlock()
	fake.SetConfigStub = stub
}

func (fake *FakeManagerFactory) SetConfigArgsForCall(i int) vcenter_client_factory.FactoryConfig {
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	argsForCall := fake.setConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManagerFactory) VCenterManager(arg1 context.Context) (*vcenter_manager.VCenterManager, error) {
	fake.vCenterManagerMutex.Lock()
	ret, specificReturn := fake.vCenterManagerReturnsOnCall[len(fake.vCenterManagerArgsForCall)]
	fake.vCenterManagerArgsForCall = append(fake.vCenterManagerArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.VCenterManagerStub
	fakeReturns := fake.vCenterManagerReturns
	fake.recordInvocation("VCenterManager", []interface{}{arg1})
	fake.vCenterManagerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManagerFactory) VCenterManagerCallCount() int {
	fake.vCenterManagerMutex.RLock()
	defer fake.vCenterManagerMutex.RUnlock()
	return len(fake.vCenterManagerArgsForCall)
}

func (fake *FakeManagerFactory) VCenterManagerCalls(stub func(context.Context) (*vcenter_manager.VCenterManager, error)) {
	fake.vCenterManagerMutex.Lock()
	defer fake.vCenterManagerMutex.Unlock()
	fake.VCenterManagerStub = stub
}

func (fake *FakeManagerFactory) VCenterManagerArgsForCall(i int) context.Context {
	fake.vCenterManagerMutex.RLock()
	defer fake.vCenterManagerMutex.RUnlock()
	argsForCall := fake.vCenterManagerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManagerFactory) VCenterManagerReturns(result1 *vcenter_manager.VCenterManager, result2 error) {
	fake.vCenterManagerMutex.Lock()
	defer fake.vCenterManagerMutex.Unlock()
	fake.VCenterManagerStub = nil
	fake.vCenterManagerReturns = struct {
		result1 *vcenter_manager.VCenterManager
		result2 error
	}{result1, result2}
}

func (fake *FakeManagerFactory) VCenterManagerReturnsOnCall(i int, result1 *vcenter_manager.VCenterManager, result2 error) {
	fake.vCenterManagerMutex.Lock()
	defer fake.vCenterManagerMutex.Unlock()
	fake.VCenterManagerStub = nil
	if fake.vCenterManagerReturnsOnCall == nil {
		fake.vCenterManagerReturnsOnCall = make(map[int]struct {
			result1 *vcenter_manager.VCenterManager
			result2 error
		})
	}
	fake.vCenterManagerReturnsOnCall[i] = struct {
		result1 *vcenter_manager.VCenterManager
		result2 error
	}{result1, result2}
}

func (fake *FakeManagerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setConfigMutex.RLock()
	defer fake.setConfigMutex.RUnlock()
	fake.vCenterManagerMutex.RLock()
	defer fake.vCenterManagerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManagerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.ManagerFactory = new(FakeManagerFactory)
