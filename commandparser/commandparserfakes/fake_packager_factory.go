// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/colorlogger"
	"github.com/cloudfoundry/stembuild/commandparser"
	"github.com/cloudfoundry/stembuild/package_stemcell/config"
)

type FakePackagerFactory struct {
	NewPackagerStub        func(config.SourceConfig, config.OutputConfig, colorlogger.Logger) (commandparser.Packager, error)
	newPackagerMutex       sync.RWMutex
	newPackagerArgsForCall []struct {
		arg1 config.SourceConfig
		arg2 config.OutputConfig
		arg3 colorlogger.Logger
	}
	newPackagerReturns struct {
		result1 commandparser.Packager
		result2 error
	}
	newPackagerReturnsOnCall map[int]struct {
		result1 commandparser.Packager
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackagerFactory) NewPackager(arg1 config.SourceConfig, arg2 config.OutputConfig, arg3 colorlogger.Logger) (commandparser.Packager, error) {
	fake.newPackagerMutex.Lock()
	ret, specificReturn := fake.newPackagerReturnsOnCall[len(fake.newPackagerArgsForCall)]
	fake.newPackagerArgsForCall = append(fake.newPackagerArgsForCall, struct {
		arg1 config.SourceConfig
		arg2 config.OutputConfig
		arg3 colorlogger.Logger
	}{arg1, arg2, arg3})
	stub := fake.NewPackagerStub
	fakeReturns := fake.newPackagerReturns
	fake.recordInvocation("NewPackager", []interface{}{arg1, arg2, arg3})
	fake.newPackagerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackagerFactory) NewPackagerCallCount() int {
	fake.newPackagerMutex.RLock()
	defer fake.newPackagerMutex.RUnlock()
	return len(fake.newPackagerArgsForCall)
}

func (fake *FakePackagerFactory) NewPackagerCalls(stub func(config.SourceConfig, config.OutputConfig, colorlogger.Logger) (commandparser.Packager, error)) {
	fake.newPackagerMutex.Lock()
	defer fake.newPackagerMutex.Unlock()
	fake.NewPackagerStub = stub
}

func (fake *FakePackagerFactory) NewPackagerArgsForCall(i int) (config.SourceConfig, config.OutputConfig, colorlogger.Logger) {
	fake.newPackagerMutex.RLock()
	defer fake.newPackagerMutex.RUnlock()
	argsForCall := fake.newPackagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePackagerFactory) NewPackagerReturns(result1 commandparser.Packager, result2 error) {
	fake.newPackagerMutex.Lock()
	defer fake.newPackagerMutex.Unlock()
	fake.NewPackagerStub = nil
	fake.newPackagerReturns = struct {
		result1 commandparser.Packager
		result2 error
	}{result1, result2}
}

func (fake *FakePackagerFactory) NewPackagerReturnsOnCall(i int, result1 commandparser.Packager, result2 error) {
	fake.newPackagerMutex.Lock()
	defer fake.newPackagerMutex.Unlock()
	fake.NewPackagerStub = nil
	if fake.newPackagerReturnsOnCall == nil {
		fake.newPackagerReturnsOnCall = make(map[int]struct {
			result1 commandparser.Packager
			result2 error
		})
	}
	fake.newPackagerReturnsOnCall[i] = struct {
		result1 commandparser.Packager
		result2 error
	}{result1, result2}
}

func (fake *FakePackagerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newPackagerMutex.RLock()
	defer fake.newPackagerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackagerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.PackagerFactory = new(FakePackagerFactory)
