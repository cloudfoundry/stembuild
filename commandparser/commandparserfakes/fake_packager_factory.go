// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry/stembuild/commandparser"
	"github.com/cloudfoundry/stembuild/package_stemcell/config"
)

type FakePackagerFactory struct {
	PackagerStub        func(config.SourceConfig, config.OutputConfig, int, bool) (commandparser.Packager, error)
	packagerMutex       sync.RWMutex
	packagerArgsForCall []struct {
		arg1 config.SourceConfig
		arg2 config.OutputConfig
		arg3 int
		arg4 bool
	}
	packagerReturns struct {
		result1 commandparser.Packager
		result2 error
	}
	packagerReturnsOnCall map[int]struct {
		result1 commandparser.Packager
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackagerFactory) Packager(arg1 config.SourceConfig, arg2 config.OutputConfig, arg3 int, arg4 bool) (commandparser.Packager, error) {
	fake.packagerMutex.Lock()
	ret, specificReturn := fake.packagerReturnsOnCall[len(fake.packagerArgsForCall)]
	fake.packagerArgsForCall = append(fake.packagerArgsForCall, struct {
		arg1 config.SourceConfig
		arg2 config.OutputConfig
		arg3 int
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	stub := fake.PackagerStub
	fakeReturns := fake.packagerReturns
	fake.recordInvocation("Packager", []interface{}{arg1, arg2, arg3, arg4})
	fake.packagerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackagerFactory) PackagerCallCount() int {
	fake.packagerMutex.RLock()
	defer fake.packagerMutex.RUnlock()
	return len(fake.packagerArgsForCall)
}

func (fake *FakePackagerFactory) PackagerCalls(stub func(config.SourceConfig, config.OutputConfig, int, bool) (commandparser.Packager, error)) {
	fake.packagerMutex.Lock()
	defer fake.packagerMutex.Unlock()
	fake.PackagerStub = stub
}

func (fake *FakePackagerFactory) PackagerArgsForCall(i int) (config.SourceConfig, config.OutputConfig, int, bool) {
	fake.packagerMutex.RLock()
	defer fake.packagerMutex.RUnlock()
	argsForCall := fake.packagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePackagerFactory) PackagerReturns(result1 commandparser.Packager, result2 error) {
	fake.packagerMutex.Lock()
	defer fake.packagerMutex.Unlock()
	fake.PackagerStub = nil
	fake.packagerReturns = struct {
		result1 commandparser.Packager
		result2 error
	}{result1, result2}
}

func (fake *FakePackagerFactory) PackagerReturnsOnCall(i int, result1 commandparser.Packager, result2 error) {
	fake.packagerMutex.Lock()
	defer fake.packagerMutex.Unlock()
	fake.PackagerStub = nil
	if fake.packagerReturnsOnCall == nil {
		fake.packagerReturnsOnCall = make(map[int]struct {
			result1 commandparser.Packager
			result2 error
		})
	}
	fake.packagerReturnsOnCall[i] = struct {
		result1 commandparser.Packager
		result2 error
	}{result1, result2}
}

func (fake *FakePackagerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.packagerMutex.RLock()
	defer fake.packagerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackagerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.PackagerFactory = new(FakePackagerFactory)
